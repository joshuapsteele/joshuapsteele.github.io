<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zanzibar on Joshua P. Steele</title>
    <link>https://joshuapsteele.com/tags/zanzibar/</link>
    <description>Recent content in Zanzibar on Joshua P. Steele</description>
    <generator>Hugo -- 0.147.2</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 05 May 2025 14:23:32 -0400</lastBuildDate>
    <atom:link href="https://joshuapsteele.com/tags/zanzibar/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real-World Authorization Lessons with OpenFGA? I’d Love to Hear Them</title>
      <link>https://joshuapsteele.com/real-world-openfga-authorization-lessons/</link>
      <pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate>
      <guid>https://joshuapsteele.com/real-world-openfga-authorization-lessons/</guid>
      <description>Are you using OpenFGA or a Zanzibar-inspired authorization system in production? I&amp;#39;d love to hear how you&amp;#39;re managing models and authorization data at scale.</description>
      <content:encoded><![CDATA[<p>Are you using <a href="https://openfga.dev/">OpenFGA</a> or another Google Zanzibar-inspired authorization engine <strong>in the wild</strong>—not just for a side project or proof of concept, but in a production environment with real users and systems?</p>
<p>If so, I’d love to learn from your experience.</p>
<h2 id="my-interest">My Interest</h2>
<p>I’m currently working on a centralized authorization system prototype based on OpenFGA. The design is aiming to support fine-grained, relationship-based access control (ReBAC) for multiple business units—each with its own data domain, developer team, and authorization needs.</p>
<p>The documentation and examples for OpenFGA are helpful, but they tend to focus on <strong>small-scale setups</strong>. What’s much harder to find are <strong>real-world case studies</strong> or lessons learned from organizations that are actually using it (or something similar like Topaz, SpiceDB, or AuthZed) in production at scale.</p>
<h2 id="my-questions-for-you">My Questions for You</h2>
<p>If you’ve deployed OpenFGA—or any Google Zanzibar-style system—in production, would you be willing to share your answers to some of the following questions?</p>
<h3 id="1-how-are-you-managing-authorization-models">1. <strong>How are you managing authorization models?</strong></h3>
<ul>
<li>How do application teams define and evolve their FGA models?</li>
<li>Do you use a UI, CLI, or CI/CD pipeline to update model definitions?</li>
<li>Have you hit any pain points around model versioning, migrations, or validation?</li>
</ul>
<h3 id="2-how-do-clients-get-data-into-your-fga-store">2. <strong>How do clients get data into your FGA store?</strong></h3>
<ul>
<li>Do application teams push tuples directly via API?</li>
<li>Is there a dedicated “tuple management service” (e.g. fed via CDC pipelines or batch jobs)?</li>
<li>What safeguards do you have to avoid flooding the system with unnecessary or stale relationships?</li>
</ul>
<h3 id="3-what-does-your-production-environment-look-like">3. <strong>What does your production environment look like?</strong></h3>
<ul>
<li>How do you handle tenancy? One store per tenant? One store for all?</li>
<li>How do you monitor and alert on query latency, error rates, or integrity issues?</li>
<li>Have you hit any performance bottlenecks under load?</li>
</ul>
<h2 id="why-im-asking">Why I’m Asking</h2>
<p>I think Zanzibar-style systems have a ton of potential—especially for complex, multi-tenant, or federated environments—but they also come with their own complexity tax. Getting the <strong>model layer</strong> and the <strong>data ingestion layer</strong> right seems critical for long-term success, and I’d rather learn from those who’ve been there.</p>
<p>If you’ve got hard-won wisdom, pain points, patterns, or even horror stories—<strong>I’m all ears</strong>.</p>
<p>Feel free to drop a comment below, or <a href="/contact/">contact me</a>.</p>
<p>Thanks in advance!</p>
<p>– Josh</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
