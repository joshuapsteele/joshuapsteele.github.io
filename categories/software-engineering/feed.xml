<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering on Joshua P. Steele</title><link>https://joshuapsteele.github.io/categories/software-engineering/</link><description>Recent content in Software Engineering on Joshua P. Steele</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Mon, 03 Jul 2023 21:08:09 +0000</lastBuildDate><atom:link href="https://joshuapsteele.github.io/categories/software-engineering/feed.xml" rel="self" type="application/rss+xml"/><item><title>Essential Reads for New Software Developers: The Effective Engineer and The Missing README</title><link>https://joshuapsteele.github.io/essential-reads-for-new-software-developers-the-effective-engineer-and-the-missing-readme/</link><pubDate>Mon, 03 Jul 2023 21:08:09 +0000</pubDate><guid>https://joshuapsteele.github.io/essential-reads-for-new-software-developers-the-effective-engineer-and-the-missing-readme/</guid><description>&lt;p>Are you stepping into the exciting world of software engineering, or considering whether to take that leap? You’re not alone. This field attracts countless individuals worldwide, fueled by an ever-increasing demand for technological solutions, the promise of high salaries, and a keen interest in problem-solving.&lt;/p>
&lt;p>However, it’s essential to understand that coding and programming skills, while crucial, are just one part of a broader equation. Equally important is the bigger picture of how software development fits into the wider professional and business environment.&lt;/p></description></item><item><title>Discover Learn X in Y Minutes: An Invaluable Resource for Programmers</title><link>https://joshuapsteele.github.io/discover-learn-x-in-y-minutes-an-invaluable-resource-for-programmers/</link><pubDate>Sat, 18 Mar 2023 12:50:58 +0000</pubDate><guid>https://joshuapsteele.github.io/discover-learn-x-in-y-minutes-an-invaluable-resource-for-programmers/</guid><description>&lt;p>As a programmer or someone aspiring to be one, you’re always on the lookout for valuable resources to help you learn new languages and tools. Today, I’m excited to introduce you to &lt;a href="https://learnxinyminutes.com/">learnxinyminutes.com&lt;/a>, a must-visit website for anyone interested in coding. This site offers concise, code-focused tutorials for dozens of programming languages and essential tools, making it a perfect learning companion for beginners and experienced coders alike.&lt;/p>
&lt;h2 id="quick-and-efficient-learning">Quick and Efficient Learning&lt;/h2>
&lt;p>Learn X in Y Minutes understands that time is precious, which is why it provides:&lt;/p></description></item><item><title>Mastering Linux: Top Commands Every New Computer Programmer Should Learn</title><link>https://joshuapsteele.github.io/mastering-linux-top-commands-every-new-computer-programmer-should-learn/</link><pubDate>Thu, 16 Mar 2023 17:37:01 +0000</pubDate><guid>https://joshuapsteele.github.io/mastering-linux-top-commands-every-new-computer-programmer-should-learn/</guid><description>&lt;p>Are you new to the world of computer programming? If so, learning &lt;a href="https://en.wikipedia.org/wiki/Linux">Linux&lt;/a> commands is an essential step in your journey. Linux is a powerful and versatile operating system used by developers across various fields.&lt;/p>
&lt;p>In this blog post, we’ll cover the most important Linux commands that every new computer programmer should learn to level up their skills.&lt;/p>
&lt;p>(Want to learn even more about Linux? Check out &lt;em>&lt;a href="https://amzn.to/3mRKdY5">Linux Pocket Guide: Essential Commands&lt;/a>&lt;/em> and &lt;em>&lt;a href="https://amzn.to/3ZSntpL">The Linux Command Line: A Complete Introduction&lt;/a>&lt;/em>.)&lt;/p></description></item><item><title>Ask Me Anything: Software Engineering Questions from a Coding Bootcamp Student</title><link>https://joshuapsteele.github.io/ask-me-anything-software-engineering-questions-from-a-coding-bootcamp-student/</link><pubDate>Thu, 09 Mar 2023 14:10:31 +0000</pubDate><guid>https://joshuapsteele.github.io/ask-me-anything-software-engineering-questions-from-a-coding-bootcamp-student/</guid><description>&lt;p>I’m posting my answers to these software engineering questions here, just in case anyone else finds them helpful! (Also, it gives me another link to share when I get asked these kinds of questions.)&lt;/p>
&lt;h2 id="how-did-you-become-interested-in-software-engineering">How did you become interested in software engineering?&lt;/h2>
&lt;p>I wrote a bit about &lt;a href="https://joshuapsteele.com/my-coding-bootcamp-journey-how-a-pastor-became-a-programmer/">my coding bootcamp journey&lt;/a> in a previous post.&lt;/p>
&lt;p>Part of my interest in software engineering is/was related to the particular path my journey took. That is, while studying Bible/religion/theology, I always knew that “bi-vocational ministry” (ministering in a church setting while also making money from another profession) was on the table.&lt;/p></description></item><item><title>My Coding Bootcamp Journey: How a Pastor Became a Programmer</title><link>https://joshuapsteele.github.io/my-coding-bootcamp-journey-how-a-pastor-became-a-programmer/</link><pubDate>Fri, 03 Feb 2023 17:42:02 +0000</pubDate><guid>https://joshuapsteele.github.io/my-coding-bootcamp-journey-how-a-pastor-became-a-programmer/</guid><description>&lt;p>When I changed my major from Mechanical Engineering to Bible shortly before my first semester of college, I realized that what I was studying was not going to make me rich.&lt;/p>
&lt;p>So, throughout undergrad, seminary, and into a Ph.D. program in theology, the notion of “bi-vocational ministry” (serving the church while also making money outside of the church doing something else) was on my radar screen.&lt;/p>
&lt;p>In fact, for a few months between finishing seminary and starting my Ph.D. program, I tried to teach myself the basics of web design (HTML, CSS, JavaScript) and Ruby on Rails. (I signed up for an account on &lt;a href="https://teamtreehouse.com/">Treehouse&lt;/a> and on &lt;a href="https://www.freecodecamp.org/">freeCodeCamp&lt;/a> and I got to work!)&lt;/p></description></item><item><title>Software Testing: Possibilities, Problems, and Principles</title><link>https://joshuapsteele.github.io/software-testing-possibilities-problems-and-principles/</link><pubDate>Wed, 21 Dec 2022 21:08:05 +0000</pubDate><guid>https://joshuapsteele.github.io/software-testing-possibilities-problems-and-principles/</guid><description>&lt;p>Note: Throughout what follows, I am heavily indebted to two books in particular: &lt;a href="https://www.manning.com/books/unit-testing">Unit Testing: Principles, Practices, and Patterns&lt;/a> by &lt;a href="https://twitter.com/vkhorikov?lang=en">Vladimir Khorikov&lt;/a> (Manning Publications, 2020) and &lt;a href="https://www.manning.com/books/effective-software-testing">Effective Software Testing: A Developer’s Guide&lt;/a> by &lt;a href="https://twitter.com/mauricioaniche">Mauricio Aniche&lt;/a> (Manning Publications, 2022). In fact, this overview of software testing should be viewed as a distillation of Khorikov and Aniche.&lt;/p>
&lt;figure>![Khorikov-UT-HI.png](https://res.craft.do/user/full/032236cd-2bcc-fa12-9dfe-e5564a597e07/doc/836657DD-FF3A-4CE5-8565-F6945FE45D6A/21ECE62D-593E-4825-A549-6312F555D284_2/ZCHd2JrecxcxPA1c35H2wTV0FrAzdktnxui31U1rO00z/Khorikov-UT-HI.png)&lt;figcaption>Khorikov-UT-HI.png&lt;/figcaption>&lt;/figure>&lt;figure>![Aniche-HI.png](https://res.craft.do/user/full/032236cd-2bcc-fa12-9dfe-e5564a597e07/doc/836657DD-FF3A-4CE5-8565-F6945FE45D6A/ED1FC92B-C9A0-4CDC-B13D-5AA3940FF3E7_2/FE2KZaydLyYRh1ydJKyDIvx4y3gaQLh82funASwXFqoz/Aniche-HI.png)&lt;figcaption>Aniche-HI.png&lt;/figcaption>&lt;/figure>---
&lt;h2 id="software-testing-our-fields-least-sexy-superpower">Software Testing, Our Field’s Least-Sexy Superpower&lt;/h2>
&lt;p>Coming into software development from a background in the humanities, automated software testing struck me as a kind of superpower. Until, that is, I had to write my first software test!&lt;/p></description></item><item><title>ChatGPT: Write a Viral Blogpost about Why to Become a Software Engineer</title><link>https://joshuapsteele.github.io/chatgpt-write-a-viral-blogpost-about-why-to-become-a-software-engineer/</link><pubDate>Mon, 19 Dec 2022 14:17:13 +0000</pubDate><guid>https://joshuapsteele.github.io/chatgpt-write-a-viral-blogpost-about-why-to-become-a-software-engineer/</guid><description>&lt;p>Are you considering a career in software engineering but not sure if it’s right for you? Here are just a few reasons why becoming a software engineer is a great choice:&lt;/p>
&lt;p>High demand and good pay: Software engineering is a rapidly growing field, with many companies actively seeking qualified candidates. According to the Bureau of Labor Statistics, the median annual wage for software developers was $107,510 in 2020, and employment of software developers is projected to grow 21% from 2020 to 2029, much faster than the average for all occupations.&lt;/p></description></item></channel></rss>